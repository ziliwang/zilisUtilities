#!/usr/bin/env python3

# filename: STGffparser.py3
# encoding: utf-8

import sys
import argparse
from Bio import SeqIO

def parse_args():
    des_info='''FUNCTION:
    STGffparser, Single Type Gff file parser. This parser required the gff file have only one type.e.g. the exon type, this program will produce the exon sequence annotated by gff file.
    '''
    epilog_info='''Written by Zili Wang.
    STATE: STGffparser is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
    If you have any problem or suggestions about this program, please mail to: wzlnot@gmail.com'''
    parser = argparse.ArgumentParser(description=des_info,epilog=epilog_info);
    parser.add_argument('fasta', type=str, help='annotated fasta file') 
    parser.add_argument('gff', type=str, help='gff file')
    args = parser.parse_args()
    return args

def main():
    args = parse_args()
    fa_handle=open(args.genome) 
    fasta_dict = SeqIO.to_dict(SeqIO.parse(fa_handle,"fasta"))
    fa_handle.close()
    gff = open(args.gff,'r')
    gene_seq={}
    while True:
        line=gff.readline()
        if not line:
            break
        elif line =='\n':
            continue # skip blank line
        items = line.split('\t')
        ind = items[6]+':'+items[8].split(';')[1].split('=')[1]+'|'+items[8].split(';')[6].split('=')[1] #strand use for parsing, p_id and id are combined as new id 
        if ind not in gene_seq.keys():
            gene_seq[ind]=fasta_dict[items[0]][(int(items[3])-1):int(items[4])]
        else:
            gene_seq[ind]=gene_seq[ind]+fasta_dict[items[0]][(int(items[3])-1):int(items[4])]
    gff.close()
    for gene in gene_seq:
        inds = gene.split(':')
        if inds[0] == '+':
            print('>%s\n%s' % (inds[1],gene_seq[gene].seq))
        else:
            print('>%s\n%s' % (inds[1],gene_seq[gene].reverse_complement().seq))

if __name__ == '__main__':
    main()
