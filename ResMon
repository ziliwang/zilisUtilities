#!/usr/bin/env python3

#filename: ResMon.py3
# encoding: utf-8

import sys
import os
import time

use_message = '''
ResMon monitoring the usage of computational resource of a specified process set (pipeline).
Useage:
	ResMon <pid> <time[s]>

This will output ResMon.data in current path
'''

class Usage(Exception):
	def __init__(self, msg):
		self.msg = msg

def get_child_process(pid):
	cpids=''.join(os.popen('''ps -a -o pid,ppid | awk '$2=="%s"{print $1}' ''' % (pid)).readlines()).strip("\n").split('\n')
	return cpids

def planish(L):
	return sum(map(planish,L),[]) if isinstance(L,list) else [L]
	
def get_pipe_pids(pid):
	cpids=[[pid,],]
	i=0
	while True:
		if len(cpids) > i:
			for j in cpids[i]:		
				tmp=get_child_process(j)
				if tmp[0]:
					if i+1 > len(cpids):
						cpids[i+1]=cpids[i]+tmp
					else:
						cpids.append(tmp)
			i+=1
		else:
			break
	ppids = planish(cpids)
	return ppids
		
def main(output='ResMon.data'):
	try:
		output_fd = open(output, 'w')
		target_PID,sleep_time = sys.argv[1],sys.argv[2]
		output_fd.write('%s(%%)\t%s(kb)\t%s(byte)\t%s(byte)' % ('cpus','mem','io_read','io_write') + '\n')
		print('%s(%%)\t%s(kb)\t%s(byte)\t%s(byte)' % ('cpus','mem','io_read','io_write'))
		while(os.popen('''ps -a -o pid | grep -w "%s" ''' % (target_PID)).readline() is not ''):
			mem,cpus,io_read,io_write=0,0,0,0
			for pid in get_pipe_pids(target_PID):
				if os.path.exists('/proc/%s' % (pid)):
					mem=mem+float(os.popen('''pmap -x %s | awk '$1=="total"{print $3}' ''' % (pid)).readline().strip('\n'))
					cpus=cpus+float(os.popen('''ps aux | awk '$2=="%s"{print $3}' ''' % (pid)).readline().strip('\n'))
					if os.path.isfile('/proc/%s/io' % (pid)):
						io_read=io_read+float(os.popen('''cat /proc/%s/io | sed -nr 's/rchar: ([0-9]+)/\\1/p' ''' % (pid)).readline().strip('\n'))
						io_write=io_write+float(os.popen('''cat /proc/%s/io | sed -nr 's/wchar: ([0-9]+)/\\1/p' ''' % (pid)).readline().strip('\n'))
			output_fd.write("%d\t%d\t%d\t%d" % (cpus,mem,io_read,io_write) + '\n')
			print("%d\t%d\t%d\t%d" % (cpus,mem,io_read,io_write))
			time.sleep(float(sleep_time))
		print('processes finished!' )
		output_fd.close()
		return 0		

	except:
		print('\n\033[1;31;40m' + sys.argv[0].split("/")[-1] + ": " + 'failed' + '\033[0m')
		print('''%s''' % (use_message))	
		return 2


if __name__ == "__main__":
	sys.exit(main()) 
